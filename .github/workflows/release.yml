name: Build, Test & Release

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

permissions:
  contents: write         # needed for pushing tags & releases
  packages: write
  issues: write

jobs:
# --------------------------------------------------------------------------- #
# 1) CI – build & test on every push / PR                                     #
# --------------------------------------------------------------------------- #
  ci:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    # ─────────────  fast placeholder for tests (keeps repo clean) ─────────── #
    - name: Inject dummy version for tests
      run: |
        if grep -q "__VERSION__" pyproject.toml; then
          sed -i 's/__VERSION__/0.0.1/g' pyproject.toml
        fi

    - uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - uses: astral-sh/setup-uv@v5
      with: { version: '0.7.8' }

    - name: Install deps & run tests
      run: |
        uv lock
        uv sync --locked --all-extras --dev
        uv run pytest --cov=src

# --------------------------------------------------------------------------- #
# 2) Release – only on pushes to main after CI passes                         #
# --------------------------------------------------------------------------- #
  release:
    needs: ci
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0        # we need full history & tags

    - uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - uses: astral-sh/setup-uv@v5
      with: { version: '0.7.8' }

    # ─────────────  decide bump type from last commit message  ────────────── #
    - name: Determine bump type (feat → minor, else patch)
      id: bump_type
      run: |
        msg="$(git log -1 --pretty=%B)"
        if [[ "$msg" =~ ^(feat|feature): ]]; then
          echo "bump=minor" >> "$GITHUB_OUTPUT"
        else
          echo "bump=patch" >> "$GITHUB_OUTPUT"
        fi

    # ─────────────  bump version, update placeholder(s) & capture it  ─────── #
    - name: Bump semver & substitute __VERSION__
      id: bump
      run: |
        bump_type=${{ steps.bump_type.outputs.bump }}
        out=$(python scripts/bump_version.py "$bump_type" --files pyproject.toml)
        echo "$out"
        version=$(echo "$out" | grep '^VERSION=' | cut -d= -f2)
        echo "version=${version}" >> "$GITHUB_OUTPUT"

    # ─────────────  create and push Git tag  ──────────────────────────────── #
    - name: Create & push tag v<version>
      env:
        TAG: "v${{ steps.bump.outputs.version }}"
      run: |
        git config user.name  "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        git tag -a "$TAG" -m "Release $TAG"
        git push origin "$TAG"

    # ─────────────  build wheel + sdist  ──────────────────────────────────── #
    - name: Build package
      run: |
        uv lock
        uv sync --locked --all-extras --dev
        uv build

    # ─────────────  create GitHub Release  ────────────────────────────────── #
    - name: Create GitHub release
      id: release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ steps.bump.outputs.version }}
        release_name: Release v${{ steps.bump.outputs.version }}
        draft: false
        prerelease: false

    # ─────────────  upload artifacts  ─────────────────────────────────────── #
    - name: Upload wheel
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.release.outputs.upload_url }}
        asset_path: ./dist/mcp_server_attom-${{ steps.bump.outputs.version }}-py3-none-any.whl
        asset_name: mcp_server_attom-${{ steps.bump.outputs.version }}-py3-none-any.whl
        asset_content_type: application/octet-stream

    - name: Upload sdist
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.release.outputs.upload_url }}
        asset_path: ./dist/mcp_server_attom-${{ steps.bump.outputs.version }}.tar.gz
        asset_name: mcp_server_attom-${{ steps.bump.outputs.version }}.tar.gz
        asset_content_type: application/gzip

    # ─────────────  publish to PyPI (optional)  ───────────────────────────── #
    - name: Publish to PyPI
      if: ${{ secrets.PYPI_TOKEN != '' }}
      env:
        UV_PUBLISH_TOKEN: ${{ secrets.PYPI_TOKEN }}
      run: uv publish
